name: Build
on:
  workflow_dispatch:
  schedule:
    - cron: '0 0 * * *'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - 
        name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - 
        name: Check for new tags in hoytech/strfry
        run: |
          #!/bin/bash
          latest_tag=$(curl -s https://api.github.com/repos/hoytech/strfry/tags | jq -r '.[0].name')
          echo "latest_tag=$latest_tag" >> $GITHUB_ENV
      - 
        name: Check if the new tag exists in DockerHub
        id: check-tag
        run: |
          #!/bin/bash
          dockerhub_tags=$(curl -s https://hub.docker.com/v2/repositories/${{ secrets.DOCKERHUB_REPO }}/tags | jq -r '.results[].name')
          if echo "${dockerhub_tags}" | grep -q "${{ env.latest_tag }}"; then
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "exists=false" >> $GITHUB_ENV
          fi
      - 
        name: Set up Docker Buildx
        if: env.exists == 'false'
        uses: docker/setup-buildx-action@v3
      -
        name: Prepare Docker build
        if: env.exists == 'false'
        id: prepare
        run: |
        
          PLATFORMS="linux/amd64,linux/arm64"
          
          TAGS=()
          TAGS=("${{ secrets.DOCKERHUB_REPO }}:latest")
          TAGS+=("${{ secrets.DOCKERHUB_REPO }}:${{ env.latest_tag }}")
          TAGS+=("ghcr.io/${{ github.repository }}:latest")
          TAGS+=("ghcr.io/${{ github.repository }}:${{ env.latest_tag }}")
          
          echo "tags=${TAGS[@]}" >> $GITHUB_OUTPUT
          echo "version=${{ env.latest_tag }}" >> $GITHUB_OUTPUT
          echo "docker_platforms=${PLATFORMS}" >> $GITHUB_OUTPUT
          echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT      
      - 
        name: Clone branch
        if: env.exists == 'false'
        run: |
          git config --global url.https://github.com/.insteadOf git://github.com/
          git clone --recurse-submodules -j8 https://github.com/hoytech/strfry.git --single-branch --branch ${{ steps.prepare.outputs.version }}
          cp Dockerfile strfry/
          cp .dockerignore strfry/
          cp strfry.sh strfry/
          cp strfry.conf strfry/
          cp write-policy.py strfry/
          cp strfry-router.conf strfry/
      -
        name: Login into Docker Hub
        if: env.exists == 'false'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Login to GitHub Container Registry
        if: env.exists == 'false'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - 
        name: Build Docker image
        if: env.exists == 'false'
        run: |
        
          TAGS=(${{ steps.prepare.outputs.tags }})

          echo "Build date: ${{ steps.prepare.outputs.build_date }}"
          echo "Docker platform: ${{ steps.prepare.outputs.docker_platforms }}"
          echo "Tags: ${{ steps.prepare.outputs.tags }}"

          cd strfry
          docker buildx build --platform ${{ steps.prepare.outputs.docker_platforms }} \
            --output "type=image,push=true" \
            --progress=plain \
            --build-arg "BUILD_ARG=${GITHUB_RUN_ID}" \
            --build-arg "VERSION_ARG=${{ steps.prepare.outputs.version }}" \
            --build-arg "DATE_ARG=${{ steps.prepare.outputs.build_date }}" \
            --build-arg "VCS_REF=${GITHUB_SHA::8}" \
            $(printf "%s" "${TAGS[@]/#/ --tag }" ) .
      -
        name: Clear Docker credentials
        if: env.exists == 'false'
        run: |
          rm -f ${HOME}/.docker/config.json
      -
        name: Create a release
        if: env.exists == 'false'
        uses: action-pack/github-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}
        with:
          tag: "v${{ steps.prepare.outputs.version }}"
          title: "v${{ steps.prepare.outputs.version }}"
